/**
 * Cotect User Endpoints
 * User endpoints REST API for cotect project.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CaseReport from '../model/CaseReport';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteUserUsersMeDelete operation.
     * @callback module:api/DefaultApi~deleteUserUsersMeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user.
     * Deletes the user&#x27;s node and all of the node&#x27;s relations.
     * @param {module:api/DefaultApi~deleteUserUsersMeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserUsersMeDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyCookie', 'APIKeyHeader', 'APIKeyQuery', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/me', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAssessmentAssessmentGet operation.
     * @callback module:api/DefaultApi~getAssessmentAssessmentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the latest risk assessment.
     * @param {module:api/DefaultApi~getAssessmentAssessmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAssessmentAssessmentGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyCookie', 'APIKeyHeader', 'APIKeyQuery', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/assessment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateReportReportsPost operation.
     * @callback module:api/DefaultApi~updateReportReportsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the user&#x27;s case report.
     * @param {module:api/DefaultApi~updateReportReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateReportReportsPost(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyCookie', 'APIKeyHeader', 'APIKeyQuery']; // , 'HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
