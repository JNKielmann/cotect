/**
 * Cotect User Endpoints
 * User endpoints REST API for cotect project.
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Assessments service.
* @module api/AssessmentsApi
* @version 0.1.2
*/
export default class AssessmentsApi {

    /**
    * Constructs a new AssessmentsApi. 
    * @alias module:api/AssessmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPlaceAssessment operation.
     * @callback module:api/AssessmentsApi~getPlaceAssessmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current risk assessment for a place.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.latitude Latitude of place.
     * @param {Number} opts.longitude Longitude of place.
     * @param {String} opts.placeId Google places id - alternative to lat/long.
     * @param {module:api/AssessmentsApi~getPlaceAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPlaceAssessment(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'place_id': opts['placeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/assessments/place', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAssessment operation.
     * @callback module:api/AssessmentsApi~getUserAssessmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current risk assessment for a user.
     * @param {module:api/AssessmentsApi~getUserAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserAssessment(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assessments/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
